# decu.cfg
# Default decu configuration file.
#
# This configuration file is read by a DecuParser object (see
# decu/config.py) which subclasses configparser.ConfigParser and
# functionality in order to treat ANY STRING HERE AS A string.Template
# object. In other words, any option in the present config file can be
# written with string.Template syntax. As such, any option can accept named
# substitutions using the ${name} syntax. Note they can also be treated as
# simple strings. The named substitutions that each option accepts are
# documented below.
#
# Note that this file does not accept inline comments, so that options can
# include the '#' symbol.


###################################################
# Section Script                                  #
# --------------                                  #
# Configuration options used in the Script class. #
###################################################
[Script]

# All the *_dir options contain the subdirectories that will be created
# build with decu init.

# Raw data files directory.
data_dir = data/

# Generated data files directory.
gendata_dir = data/

# Results generated by decu.experiment-decorated methods.
results_dir = results/

# Source code directory.
scripts_dir = src/

# Plots generated with decu.figure-decorated methods.
figures_dir = pics/

# All the *_file options contain templates for the names of the files that
# decu generates automamtically. Note that we use a double dash ('--') as
# delimiter. None of the named strings to be substituted into the file name
# (e.g., time, module_name, exp_name, etc) can have the ('--') as a
# substring.
# Named substitutions common to *_file options:
# + time: the time at which the script started running
# + module_name: name of the file that defined the currently running Script

# Template for result file names generated with decu.experiment-decorated
# methods.
# Named substitutions:
# + exp_name: name of the @experiment-decorated method that produced the result
# + run: the run identifier of the @experiment-decorated method
result_file = ${time}--${module_name}--${exp_name}--${run}

# Template for generated data file names. Not used for now.
# gendata_file = ${time}--${module_name}--${data_name}--${run}

# Template for plot files generated by decu.figure-decorated methods that
# do not supply the 'suffix' parameter.
# Named substitutions:
# + fig_name: name of the @figure-decorated method that produced the figure
# + ext: figure extension. See figure_fmt option.
figure_wo_suffix_file = ${time}--${module_name}--${fig_name}.${ext}

# Template for plot files generated by decu.figure-decorated methods that
# supply the 'suffix' parameter.
# Named substitutions:
# + suffix: the suffix supplied by the user
# + fig_name: name of the @figure-decorated method that produced the figure
# + ext: figure extension. See figure_fmt option.
figure_w_suffix_file = ${time}--${module_name}--${fig_name}--${suffix}.${ext}

# Format of the figures generated by decu.figure-decorated
# methods. figure_fmt must equal the exension, without the dot ('.') of the
# output files.
figure_fmt = png


#######################################################
# Section experiment                                  #
# ------------------                                  #
# Configuration options for the experiment decorator. #
#######################################################
[experiment]

# Named substitutions common to options in this section:
# + exp_name: name of the @experiment-decorated method
# + run: the run identifier of the @experiment-decorated method

# Log record output before starting an experiment.
start_msg = Starting ${exp_name}--${run} with $params.

# Log record output after finishing an experiment.
# Named substitutions:
# + elapsed: the time, in seconds, that the experiment took to run
end_msg = Finished ${exp_name}--${run}. Took ${elapsed}s.

# Log record output when writing experiment results to disk.
# Named substitutions:
# + outfile: the name of the written file. See result_file in section Script.
write_msg = Wrote results of ${exp_name}--${run} to ${outfile}.


###################################################
# Section figure                                  #
# ---------------                                 #
# Configuration options for the figure decorator. #
###################################################
[figure]

# Log record output when writing plot files to disk.
# Named substitutions:
# + fig_name: name of the @figure-decorated method
# + outfile: name of the file. See figure_*_file
write = Wrote figure ${fig_name} to ${outfile}.


####################################################
# Section gendata                                  #
# ---------------                                  #
# Configuration options for the gendata decorator. #
####################################################
[gendata]

# Log record output when writing generated data files to disk.
# Not used for now.
# write = Wrote data ${data_name}#${data_id} to ${outfile}.


######################################################
# Section logging                                    #
# --------------                                     #
# Configuration options for the decu.logging module. #
######################################################
[logging]

# Logs directory.
logs_dir = logs/

# Template for log file names.
# See the comment about *_file options in section Script.
# Named substitutions:
# + time: the time at which the script started running
# + module_name: name of the file that defined the currently running Script
log_file = ${time}--${module_name}.txt

#Format of each record in a log file. This option DOES NOT follow the
# string.Template syntax, but rather the logging module syntax for the
# particular option. This is directly passed to the 'format' parameter of
# the logging.Formatter constructor.
log_fmt = [%(asctime)s]%(levelname)s: %(message)s

# Format for the timie and date part of each log record. This option DOES
# NOT follow the string.Template syntax, but rather the logging module
# syntax for the particular option. This is directly passed to the
# 'datefmt' parameter of the logging.Formatter constructor.
time_fmt = %H:%M:%S


###########################################################
# Section inspect                                         #
# ---------------                                         #
# Configuration options for the inspect terminal command. #
###########################################################
[inspect]

# Python code to be run inside iPython when decu is invoked with the
# inspect command. Lines must be separated by newlines, not semicolons
# (';'). These lines will be shown to the user before starting the iPython
# session.
# Named substitutions:
# + dir: scripts directory. See scripts_dir in section Script.
# + script: name of the file being loaded
# + cls: decu.Script subclass found in the script file
py_cmd_imports = import decu
py_cmd_script = import ${dir}.${script} as ${script}
	        script = ${script}.${cls}()

# Python code to be run inside iPython when in inspect mode. Lines must be
# separated by newlines, not semicolons (';'). These lines will not be
# shown to the user, but will instead be replaced by the contents of the
# noshow_replace option instead.
# Named substitutions:
# + files: list of files being loaded as 'result'
py_cmd_noshow = result = decu.io.read(${files}[0]) if len(${files}) == 1 else [decu.io.read(file) for file in ${files}]

# Option that replaces that lines that will not be shown to the user.
# Named substitutions:
# + var: name of the variable, as passed by the user on the command line
noshow_replace = # loaded ${var}
